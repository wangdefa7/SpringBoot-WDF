<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <!-- 模型版本。maven2.0必须是这样写，现在是maven2唯一支持的版本 --> 
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    
    <!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.winner.trade，maven会将该项目打成的jar包放本地路径：/com/winner/trade --> 
    <groupId>com.wdf</groupId>
    <!-- 本项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 -->
    <artifactId>SpringBoot-WDF</artifactId>
    <!-- 本项目目前所处的版本号 -->  
    <version>0.2</version>
    <!-- 打包的机制，如pom,jar, maven-plugin, ejb, war, ear, rar, par，默认为jar -->  
    <packaging>jar</packaging>
    <name>SpringBoot-WDF</name>
    <description>WDF project for Spring Boot</description>

	<!-- 为pom定义一些常量，在pom中的其它地方可以直接引用 使用方式 如下 ：${file.encoding} -->  
    <properties>
        <java.version>1.8</java.version>
    </properties>

	<!-- 定义本项目的依赖关系 -->  
    <dependencies>
        <dependency>
         	<!--一般情况下，maven是通过groupId、artifactId、version这三个元素值（俗称坐标）来检索该构件， 然后引入你的工程。-->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            </dependency>

		<!-- 热部署 devtool-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <!-- maven认为，程序对外部的依赖会随着程序的所处阶段和应用场景而变化，所以maven中的依赖关系有作用域(scope)的限制。 -->  
            <!--scope包含如下的取值：compile（编译范围）、provided（已提供范围）、runtime（运行时范围）、test（测试范围）、system（系统范围） -->  
            <scope>runtime</scope>
            <!-- 设置指依赖是否可选，默认为false,即子项目默认都继承:为true,则子项目必需显示的引入，与dependencyManagement里定义的依赖类似  -->  
            <optional>true</optional>
        </dependency>
        
        <!-- lombok简写注解 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <!-- 屏蔽依赖关系。 比如项目中使用的libA依赖某个库的1.0版，libB依赖某个库的2.0版，现在想统一使用2.0版，就应该屏蔽掉对1.0版的依赖 -->  
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--freemarker 导入整合springboot的依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>
        <!--fremaker end-->

        <!-- maven 项目通过webjars 引入前端文件 -->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>webjars-locator-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>3.3.7</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>jquery</artifactId>
            <version>3.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>layui</artifactId>
            <version>2.5.6</version>
        </dependency>
        <dependency>
            <groupId>org.webjars.bowergithub.sentsin</groupId>
            <artifactId>layer</artifactId>
            <version>3.1.1</version>
        </dependency>
        <!--webjars end-->

        <!--webservice 接口-->
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-spring-boot-starter-jaxws</artifactId>
            <version>3.2.5</version>
        </dependency>

        <!-- dom4j document-->
        <dependency>
            <groupId>dom4j</groupId>
            <artifactId>dom4j</artifactId>
            <version>1.6.1</version>
        </dependency>

        <!-- json-->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20180813</version>
        </dependency>
        
        <!-- fastjson -->
        <dependency>
        	<groupId>com.alibaba</groupId>
        	<artifactId>fastjson</artifactId>
        	<version>1.2.47</version>
        </dependency>
        
        <!-- httpClient -->
        <dependency>
        	<groupId>org.apache.httpcomponents</groupId>
        	<artifactId>httpclient</artifactId>
        </dependency>
        
        <!-- junit -->
        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
		<dependency>
		    <groupId>org.junit.jupiter</groupId>
		    <artifactId>junit-jupiter-api</artifactId>
		  <!--  <version>5.5.2</version>
		    <scope>test</scope>-->
		</dependency>
		
		<!-- 日志 -->
		<dependency>
	        <groupId>commons-logging</groupId>
	        <artifactId>commons-logging</artifactId>
	        <version>1.1.3</version>
	    </dependency>
	    
	    <!-- 权限控制shiro -->
	    <dependency>
	        <groupId>org.apache.shiro</groupId>
	        <artifactId>shiro-core</artifactId>
	        <version>1.8.0</version>
	    </dependency>

        <!--shiro与spring整合-->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>RELEASE</version>
        </dependency>
        
        <!-- thymeleaf模板引擎引入 -->
<!--         <dependency>
		    <groupId>org.thymeleaf</groupId>
		    <artifactId>thymeleaf</artifactId>
		</dependency> -->
		<dependency> 
		     <groupId>org.springframework.boot</groupId> 
		     <artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
        
        <!-- shiro与thymeleaf整合 -->
        <dependency>
		    <groupId>com.github.theborakompanioni</groupId>
		    <artifactId>thymeleaf-extras-shiro</artifactId>
		    <version>2.0.0</version>
		</dependency>
		
		<!-- shiro-freemarker-tags start -->
		<dependency>
		    <groupId>net.mingsoft</groupId>
		    <artifactId>shiro-freemarker-tags</artifactId>
		    <version>1.0.0</version>
<!-- 		    <exclusions>
		        <exclusion>
		            <groupId>org.apache.shiro</groupId>
		            <artifactId>shiro-all</artifactId>
		        </exclusion>
		        <exclusion>
		            <groupId>org.freemarker</groupId>
		            <artifactId>freemarker</artifactId>
		        </exclusion>
		    </exclusions> -->
		</dependency>
		<!-- shiro-freemarker-tags end -->
        
        <!-- mybatis -->        
        <dependency>
		    <groupId>org.mybatis.spring.boot</groupId>
		    <artifactId>mybatis-spring-boot-starter</artifactId>
		    <version>2.1.1</version>
		</dependency> 
		
		<!-- mysql连接  -->
		<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		</dependency>
		
		<!-- 阿里连接池 -->
		<dependency>
		    <groupId>com.alibaba</groupId>
		    <artifactId>druid</artifactId>
		    <version>1.1.21</version>
		</dependency>
        
        <!-- 日志 -->
         <dependency>
		    <groupId>org.apache.tomcat.embed</groupId>
		    <artifactId>tomcat-embed-logging-juli</artifactId>
		    <version>9.0.0.M3</version>
		</dependency> 
		
		<!-- excel的工具依赖 -->
		<dependency>
		    <groupId>net.sourceforge.jexcelapi</groupId>
		    <artifactId>jxl</artifactId>
		    <version>2.6.12</version>
		</dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>3.15</version>
        </dependency>


        <!-- 网络传输工具类Ftp -->
		 <dependency>
            <groupId>commons-net</groupId>
            <artifactId>commons-net</artifactId>
            <version>3.6</version>
        </dependency>

        <!--freemarjer word 文档-->
        <dependency>
            <groupId>org.freemarker</groupId>
            <artifactId>freemarker</artifactId>
            <version>2.3.30</version>
        </dependency>

        <!-- 文件操作的工具类 -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.7</version>
        </dependency>
        <!--swagger2 项目中使用SpringFox-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>

        <!--显示基于JSON输入的HTML文档的GUI称为swagger-ui-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
        </dependency>

        <!-- word 转 pdf 外部jar-->
        <dependency>
            <groupId>aspose-words</groupId>
            <artifactId>aspose-words</artifactId>
            <version>3.2.0.0</version>
            <scope>system</scope>
            <systemPath>${basedir}/lib/aspose-words-15.8.0-jdk16.jar</systemPath>
        </dependency>

        <!--dingding sdk start-->
        <dependency>
            <groupId>taobao-sdk-java-auto</groupId>
            <artifactId>taobao-sdk-java-auto</artifactId>
            <version>0.0.0.1</version>
            <scope>system</scope>
            <systemPath>${basedir}/lib/taobao-sdk-java-auto_1479188381469-20201109.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>aspose-words</groupId>
            <artifactId>aspose-words</artifactId>
            <version>3.2.0.0</version>
            <scope>system</scope>
            <systemPath>${basedir}/lib/aspose-words-15.8.0-jdk16.jar</systemPath>
        </dependency>
        <!--dingding sdk end-->

        <!--oracle-->
        <!--<dependency>
            <groupId>com.oracle</groupId>
            <artifactId>ojdbc6</artifactId>
            <version>11.2.0.1</version>
        </dependency>-->


    </dependencies>

    
    <build>
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>

        <!-- 产生的构件的文件名，默认值是${artifactId}-${version}。 -->
    <!-- <finalName>WDFPorject</finalName>   -->
  
    <!-- 构建产生的所有文件存放的目录,默认为${basedir}/target，即项目根目录下的target -->  
    <directory>${basedir}/target</directory>  
  
    <!--当项目没有规定目标（Maven2叫做阶段（phase））时的默认值， -->  
    <!--必须跟命令行上的参数相同例如jar:jar，或者与某个阶段（phase）相同例如install、compile等 -->  
    <!-- <defaultGoal>install</defaultGoal>   -->
  
    <!--当filtering开关打开时，使用到的过滤器属性文件列表。 -->  
    <!--项目配置信息中诸如${spring.version}之类的占位符会被属性文件中的实际值替换掉 -->  
<!--     <filters>  
        <filter>../filter.properties</filter>  
    </filters>  --> 
  
    <!--项目相关的所有资源路径列表，例如和项目相关的配置文件、属性文件，这些资源被包含在最终的打包文件里。 -->  
<!--     <resources>  
        <resource>  
  
            描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。  
            举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven/messages。  
            然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。  
            <targetPath>resources</targetPath>  
  
            是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。  
            <filtering>true</filtering>  
  
            描述存放资源的目录，该路径相对POM路径  
            <directory>src/main/resources</directory>  
  
            包含的模式列表  
            <includes>  
                <include>**/*.properties</include>  
                <include>**/*.xml</include>  
            </includes>  
  
            排除的模式列表 如果<include>与<exclude>划定的范围存在冲突，以<exclude>为准  
            <excludes>  
                <exclude>jdbc.properties</exclude>  
            </excludes>  
  
        </resource>  
    </resources>   -->
  
    <!--单元测试相关的所有资源路径，配制方法与resources类似 -->  
<!--     <testResources>  
        <testResource>  
            <targetPath />  
            <filtering />  
            <directory />  
            <includes />  
            <excludes />  
        </testResource>  
    </testResources>   -->
  
    <!--项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->  
    <sourceDirectory>${basedir}\src\main\java</sourceDirectory>  
  
    <!--项目脚本源码目录，该目录和源码目录不同， 绝大多数情况下，该目录下的内容会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 -->  
    <scriptSourceDirectory>${basedir}\src\main\scripts </scriptSourceDirectory>  
  
    <!--项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->  
    <testSourceDirectory>${basedir}\src\test\java</testSourceDirectory>  
  
    <!--被编译过的应用程序class文件存放的目录。 -->  
    <outputDirectory>${basedir}\target\classes</outputDirectory>  
  
    <!--被编译过的测试class文件存放的目录。 -->  
    <testOutputDirectory>${basedir}\target\test-classes  
    </testOutputDirectory>  
  
    <!--项目的一系列构建扩展,它们是一系列build过程中要使用的产品，会包含在running bulid‘s classpath里面。 -->  
    <!--他们可以开启extensions，也可以通过提供条件来激活plugins。 -->  
    <!--简单来讲，extensions是在build过程被激活的产品 -->  
    <extensions>  
  
        <!--例如，通常情况下，程序开发完成后部署到线上Linux服务器，可能需要经历打包、 -->  
        <!--将包文件传到服务器、SSH连上服务器、敲命令启动程序等一系列繁琐的步骤。 -->  
        <!--实际上这些步骤都可以通过Maven的一个插件 wagon-maven-plugin 来自动完成 -->  
        <!--下面的扩展插件wagon-ssh用于通过SSH的方式连接远程服务器， -->  
        <!--类似的还有支持ftp方式的wagon-ftp插件 -->  
        <extension>  
            <groupId>org.apache.maven.wagon</groupId>  
            <artifactId>wagon-ssh</artifactId>  
            <version>2.8</version>  
        </extension>  
  
    </extensions>  
  
    <!--使用的插件列表 。 -->  
    <plugins>  
    	<!-- *****创建项目的时候引入的spring****  勿动 -->
    	<plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
        <!-- 外部的jar包一同打入 -->
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <executions>
                <execution>
                    <configuration>
                        <mainClass>com.dw.health.urp.Starter</mainClass>
                    </configuration>
                    <goals>
                        <goal>repackage</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <includeSystemScope>true</includeSystemScope>
            </configuration>
        </plugin>
<!--         <plugin>  
            <groupId></groupId>  
            <artifactId>maven-assembly-plugin</artifactId>  
            <version>2.5.5</version>  
  
            在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。  
            <executions>  
                <execution>  
                    执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标  
                    <id>assembly</id>  
                    绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段  
                    <phase>package</phase>  
                    配置的执行目标  
                    <goals>  
                        <goal>single</goal>  
                    </goals>  
                    配置是否被传播到子POM  
                    <inherited>false</inherited>  
                </execution>  
            </executions>  
  
            作为DOM对象的配置,配置项因插件而异  
            <configuration>  
                <finalName>${finalName}</finalName>  
                <appendAssemblyId>false</appendAssemblyId>  
                <descriptor>assembly.xml</descriptor>  
            </configuration>  
  
            是否从该插件下载Maven扩展（例如打包和类型处理器），  
            由于性能原因，只有在真需要下载时，该元素才被设置成true。  
            <extensions>false</extensions>  
  
            项目引入插件所需要的额外依赖  
            <dependencies>  
                
            </dependencies>  
  
            任何配置是否被传播到子项目  
            <inherited>true</inherited>  
  
        </plugin>   -->
    </plugins>  
  
    <!--主要定义插件的共同元素、扩展元素集合，类似于dependencyManagement， -->  
    <!--所有继承于此项目的子项目都能使用。该插件配置项直到被引用时才会被解析或绑定到生命周期。 -->  
    <!--给定插件的任何本地配置都会覆盖这里的配置 -->  
    <pluginManagement>  
        <plugins></plugins>  
    </pluginManagement>  
  
</build>  

</project>
